{"version":3,"sources":["App.js","api/server.js","index.js"],"names":["App","className","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomFromArray","array","min","max","length","Math","ceil","floor","todoTemplates","base","values","Server","routes","this","namespace","resource","server","post","schema","req","data","normalizedRequestAttrs","text","Error","create","models","todo","Model","list","todos","hasMany","factories","Factory","id","i","Number","template","value","replace","generateTodoText","completed","color","serializers","serialize","object","request","numerifyId","json","prototype","apply","arguments","forEach","seeds","createList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAqBeA,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,6BACE,iCACE,+DAEA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAIrB,iCACE,iF,gCCRFC,EAAeC,IAAeC,OAAO,CACzCC,aAAc,WASZC,EAAMC,MAwBV,IAAMC,EAAkB,SAACC,GACvB,IAPoBC,EAAKC,EAQzB,OAAOF,GARaC,EAOO,EAPFC,EAOKF,EAAMG,OAAS,EAN7CF,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMT,KAASK,EAAMD,EAAM,IAAMA,KAQzCM,EAAgB,CACpB,CAAEC,KAAM,aAAcC,OAAQ,CAAC,OAAQ,QAAS,SAAU,SAC1D,CAAED,KAAM,eAAgBC,OAAQ,CAAC,QAAS,OAAQ,UAAW,QAC7D,CAAED,KAAM,cAAeC,OAAQ,CAAC,YAAa,OAAQ,WAUvD,IAAIC,IAAO,CACTC,OADS,WAEPC,KAAKC,UAAY,UAGjBD,KAAKE,SAAS,SACdF,KAAKE,SAAS,SAEd,IAAMC,EAASH,KAEfA,KAAKI,KAAK,UAAU,SAAUC,EAAQC,GACpC,IAAMC,EAAOP,KAAKQ,yBAElB,GAAkB,UAAdD,EAAKE,KACP,MAAM,IAAIC,MAAM,4BAIlB,OADeP,EAAOQ,OAAO,OAAQJ,OAIzCK,OAAQ,CACNC,KAAMC,IAAM/B,OAAO,IACnBgC,KAAMD,IAAM/B,OAAO,CACjBiC,MAAOC,iBAGXC,UAAW,CACTL,KAAMM,IAAQpC,OAAO,CACnBqC,GADmB,SAChBC,GACD,OAAOC,OAAOD,IAEhBZ,KAJmB,WAKjB,OAxCiB,WACvB,IAAMc,EAAWpC,EAAgBQ,GAC3B6B,EAAQrC,EAAgBoC,EAAS1B,QAEvC,OADa0B,EAAS3B,KAAK6B,QAAQ,SAAUD,GAqChCE,IAETC,UAPmB,WAQjB,OAAO,GAETC,MAVmB,WAWjB,MAAO,OAIbC,YAAa,CACXhB,KAAMhC,EAAaE,OAAO,CACxB+C,UADwB,SACdC,EAAQC,GAEhB,IAAMC,EAAa,SAACpB,GAClBA,EAAKO,GAAKE,OAAOT,EAAKO,KAEpBc,EAAOrD,EAAasD,UAAUL,UAAUM,MAAMpC,KAAMqC,WAQxD,OANIH,EAAKrB,KACPoB,EAAWC,EAAKrB,MACPqB,EAAKlB,OACdkB,EAAKlB,MAAMsB,QAAQL,GAGdC,KAGXnB,KAAMlC,GAER0D,MA/DS,SA+DHpC,GACJA,EAAOqC,WAAW,OAAQ,MCpH9BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.33ed2af9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <section>\n          <h1>Redux Fundamentals Example test</h1>\n\n          <div className=\"navContent\">\n            <div className=\"navLinks\"></div>\n          </div>\n        </section>\n      </nav>\n      <section>\n        <h2>Welcome to the Redux Fundamentals example app!</h2>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}